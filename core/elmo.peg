package elmo

type ElmoGrammar Peg {

}

Script <- Spacing (Line)* EOT

Line <- (NewLine)? Argument (Shortcut)? (Argument)* (PipedOutput / EndOfLine)?

PipedOutput <- PIPE Line

EndOfLine <- PCOMMA / NewLine

Shortcut <- COLON / DOT

Argument <- Identifier
           / StringLiteral
           / Number
           / FunctionCall
           / Block
           / List

FunctionCall <- (LPAR Line RPAR) / (DOLLAR Argument (DOT Argument)?)

Block <- LCURLY (NewLine)* (Line)* RCURLY

List <- LBRACKET (NewLine)* (Argument/NewLine)* RBRACKET


# SPACING

Spacing
   <- ( WhiteSpace
      / LongComment
      / LineComment
      )*

WhiteSpace  <- [ \t]
LongComment <- '/*' (!'*/'.)* '*/'
LineComment <- '#' (!'\n' .)*

# NEW LINE

NewLine <- ([\n\r] Spacing)+

#
# IDENTIFIERS
#

Identifier <- IdNondigit IdChar* Spacing

IdNondigit <- [a-z] / [A-Z] / [_?]

IdChar <- [a-z] / [A-Z] / [0-9] / [_?]


#
# STRING LITERALS
#

StringLiteral <- ["] StringChar* ["] Spacing

StringChar <- Escape / ![\"\n\\] .

Escape <- '\\' ['\"?\\abfnrtv]

#
# NUMBERS
#

Number <- ('-')? [0-9][0-9]* ('.' [0-9][0-9]*)? Spacing


#
# PUNCTUATORS
#

LPAR      <-  '('         Spacing
RPAR      <-  ')'         Spacing
LCURLY    <-  '{'         Spacing
RCURLY    <-  '}'         Spacing
LBRACKET  <-  '['         Spacing
RBRACKET  <-  ']'         Spacing
PCOMMA    <-  ';'         Spacing
COLON     <-  ':'         Spacing
DOT       <-  '.'         Spacing
PIPE      <-  '|'         Spacing
DOLLAR    <-  '$'         Spacing
EOT       <-  !.
